Resources:
  ChameleonLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "${self:provider.environment.CHAMELEON_APP_LOGS_TABLE}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: model
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: model
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: model-logs-index
          KeySchema:
            - AttributeName: model
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      # Set the capacity to auto-scale
      BillingMode: PAY_PER_REQUEST
  ChameleonProjectTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "${self:provider.environment.CHAMELEON_PROJECTS_TABLE}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expireAt
        Enabled: true
      # Set the capacity to auto-scale
      BillingMode: PAY_PER_REQUEST
  ModelDeployEvent:
    Type: AWS::Events::EventBus
    Properties:
      Name: ${env:EVENT_BUS_NAME}
  ModelDeployEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Model Deploy EventRule"
      EventBusName: ${env:EVENT_BUS_NAME}
      EventPattern:
        source:
          - ${env:EVENT_BUS_SOURCE}
        detail-type:
          - ${env:EVENT_BUS_TYPE}
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "ChameleonSageMakerErrorLambdaFunction"
              - "Arn"
          Id: "on-error-lambda-target"
  PermissionToInvokeMLOnErrorLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "ChameleonSageMakerErrorLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ModelDeployEventRule"
          - "Arn"
  APIRestWebACL:
    Type: "AWS::WAFv2::WebACL"
    Properties:
      Name: "${self:service}${self:custom.stage}WebACL"
      Description: "WebACL to avoid DOS attack in ENV: ${self:custom.stage}"
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        SampledRequestsEnabled: true
        MetricName: "${self:service}${self:custom.stage}Metric"
      Rules:
        - Action:
            Block: {}
          Name: "${self:service}${self:custom.stage}IPRateBasedRule"
          Priority: 1
          VisibilityConfig:
            CloudWatchMetricsEnabled: false
            SampledRequestsEnabled: false
            MetricName: "${self:service}${self:custom.stage}IPRateBasedMetric"
          Statement:
            RateBasedStatement:
              Limit: 500
              AggregateKeyType: "IP"
  ApiRestWebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:apigateway:${self:provider.region}::/restapis/"
            - Ref: ApiGatewayRestApi
            - "/stages/${self:custom.stage}"
      WebACLArn:
        Fn::Join:
          - ""
          - - "arn:aws:wafv2:#{AWS::Region}:#{AWS::AccountId}:regional/webacl/"
            - Fn::Select: [0, Fn::Split: ["|", Ref: APIRestWebACL]]
            - "/"
            - Fn::Select: [1, Fn::Split: ["|", Ref: APIRestWebACL]]
